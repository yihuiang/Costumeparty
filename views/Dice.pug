doctype html
html
  head
    title Dice Roll
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    link(rel="stylesheet", href="/css/dice.css")
    style.
      #your-turn-modal {
        display: none;
        position: fixed;
        z-index: 9999;
        left: 0; top: 0;
        width: 100%; height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
      }
      .modal-content-turn {
        background: white;
        padding: 2rem;
        border-radius: 1rem;
        text-align: center;
        margin: 20% auto;
        width: 300px;
      }
  body
    button#view-btn View Character
    h2.username #{username}

    .modal#popup-modal(style="display: none;")
      .modal-content
        span.close-btn &times;
        if character
          h2= character.name
          img.popup-img(src=`/img/${character.image}`, alt=character.name)
          p.description= character.description
        else
          p Character not selected.

    .info-panel
      .score-label Score: 
      span#score= score
      .count-label   Count: 
      span#count= count


    .dice-container
      if isPlayerTurn
        .dice-box#dice-box
          img.dice2#dice-img(src="/img/dice-1.png", alt="dice")
          br
          button#roll-btn(onclick='rollDice()') Roll Dice
      else
        .dice-box#waiting-box
          img.dice(src="/img/Waitforyourturn.png", alt="Wait your turn")

    // Turn Notification Modal
    #your-turn-modal
      .modal-content-turn
        h2 Your Turn!
        p Click OK to begin your turn.
        button#turn-ok-btn OK

    // Pass gameTurnID safely to JS
    script.
      const gameTurnID = !{JSON.stringify(gameTurnID)};
    script.
      const viewBtn = document.getElementById("view-btn");
      const modal = document.getElementById("popup-modal");
      const closeBtn = document.querySelector(".close-btn");

      viewBtn.addEventListener("click", () => {
        modal.style.display = "block";
      });

      closeBtn.addEventListener("click", () => {
        modal.style.display = "none";
      });

      window.addEventListener("click", (event) => {
        if (event.target === modal) {
          modal.style.display = "none";
        }
      });

    script.
      async function rollDice() {
        const diceImg = document.getElementById('dice-img');
        if (!diceImg) return;

        diceImg.classList.add('rolling');

        setTimeout(async () => {
          const weightedRolls = [1, 2, 2, 2, 3, 4, 5]; // Black (2) appears more often
          const roll = weightedRolls[Math.floor(Math.random() * weightedRolls.length)];
          const colorMap = {
            1: { color: 'yellow', hex: '#FFD700' },
            2: { color: 'black', hex: '#1e1e1e' },
            3: { color: 'blue', hex: '#0066cc' },
            4: { color: 'red', hex: '#cc0000' },
            5: { color: 'green', hex: '#228B22' }
          };
          const rollColor = colorMap[roll].color;

          diceImg.src = `/img/dice-${roll}.png`;
          diceImg.alt = `Dice shows ${roll}`;
          document.body.style.backgroundColor = colorMap[roll].hex;
          diceImg.classList.remove('rolling');

          try {
            const response = await fetch('/roll-dice', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              credentials: 'same-origin', 
              body: JSON.stringify({
                rolledValue: roll,
                rolledColor: rollColor,
                gameTurnID: gameTurnID
              })
            });
            const data = await response.json();
            if (data.success) {
              //- alert("Roll saved! Next player's turn.");
              window.location.href = data.redirectUrl; // redirect to question page
            } else {
              alert("Failed to save roll.");
            }

          } catch (error) {
            console.error("Error:", error);
            alert("An error occurred.");
          }

        }, 800);
      }

    script.
      // Auto turn check
      const diceBox = document.getElementById("dice-box");
      const waitingBox = document.getElementById("waiting-box");
      const turnModal = document.getElementById("your-turn-modal");
      const turnOkBtn = document.getElementById("turn-ok-btn");

      let modalShown = false;

      if (!diceBox) {
        setInterval(async () => {
          try {
            const response = await fetch('/current-turn');
            const data = await response.json();
            if (data.isPlayerTurn && !modalShown) {
              modalShown = true;
              turnModal.style.display = 'block';
            }
          } catch (e) {
            console.error("Polling error:", e);
          }
        }, 3000);
      }

      if (turnOkBtn) {
        turnOkBtn.addEventListener("click", () => {
          turnModal.style.display = 'none';

          // Hide waiting box and show dice box (if they both exist)
          const diceBoxEl = document.getElementById("dice-box");
          const waitingBoxEl = document.getElementById("waiting-box");
          if (diceBoxEl) diceBoxEl.style.display = 'block';
          if (waitingBoxEl) waitingBoxEl.style.display = 'none';
        });
      }

    script.
      setInterval(() => {
        fetch('/eliminatescan/check-eliminated')
          .then(res => res.json())
          .then(data => {
            if (data.isEliminated) {
              window.location.href = '/eliminated';
            }
          })
          .catch(err => console.error("Elimination check failed:", err));
      }, 3000);

    script.
      setInterval(() => {
        fetch('/eliminatescan/check-winner')
          .then(res => res.json())
          .then(data => {
            console.log('Winner check response:', data); // Optional: for debugging
            if (data.isWinner) {
              window.location.href = '/winner';
            }
          })
          .catch(err => console.error("Winner check failed:", err));
      }, 4000);



